"use strict";(self.webpackChunkrust_wasmpack_loader=self.webpackChunkrust_wasmpack_loader||[]).push([[1579],{4812:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"docs/examples/node-bun","title":"Bun Node.js Example","description":"This example demonstrates how to use rust-wasmpack-loader with Bun runtime. Bun provides ultra-fast JavaScript execution","source":"@site/docs/docs/examples/node-bun.md","sourceDirName":"docs/examples","slug":"/docs/examples/node-bun","permalink":"/rustwasm-loader/docs/examples/node-bun","draft":false,"unlisted":false,"editUrl":"https://github.com/yeskiy/rustwasm-loader/tree/main/docs/docs/examples/node-bun.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Node.js Webpack Example","permalink":"/rustwasm-loader/docs/examples/node-webpack"},"next":{"title":"API Reference","permalink":"/rustwasm-loader/docs/api/"}}');var o=t(4848),i=t(8453);const r={},a="Bun Node.js Example",l={},c=[{value:"Project Structure",id:"project-structure",level:2},{value:"Setup Instructions",id:"setup-instructions",level:2},{value:"1. Install Bun",id:"1-install-bun",level:3},{value:"2. Initialize Project",id:"2-initialize-project",level:3},{value:"3. Install Dependencies",id:"3-install-dependencies",level:3},{value:"4. Create Cargo.toml",id:"4-create-cargotoml",level:3},{value:"5. Configure Bun",id:"5-configure-bun",level:3},{value:"6. Create Rust Code",id:"6-create-rust-code",level:3},{value:"7. Create Bun Entry Point",id:"7-create-bun-entry-point",level:3},{value:"8. Create Test File",id:"8-create-test-file",level:3},{value:"9. Update Package.json",id:"9-update-packagejson",level:3},{value:"Running the Example",id:"running-the-example",level:2},{value:"Development Mode",id:"development-mode",level:3},{value:"Testing",id:"testing",level:3},{value:"Production Build",id:"production-build",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Custom Loader Configuration",id:"custom-loader-configuration",level:3}];function u(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"bun-nodejs-example",children:"Bun Node.js Example"})}),"\n",(0,o.jsx)(e.p,{children:"This example demonstrates how to use rust-wasmpack-loader with Bun runtime. Bun provides ultra-fast JavaScript execution\nand simplified configuration, making it perfect for high-performance applications."}),"\n",(0,o.jsx)(e.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"node-bun-example/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.js          # Main Bun entry point\n\u2502   \u251c\u2500\u2500 lib.rs            # Rust WebAssembly code\n\u2502   \u2514\u2500\u2500 utils.rs          # Additional Rust modules\n\u251c\u2500\u2500 tests/                # Test files\n\u251c\u2500\u2500 Cargo.toml           # Rust configuration\n\u251c\u2500\u2500 package.json         # Dependencies and scripts\n\u251c\u2500\u2500 bunfig.toml          # Bun configuration\n\u2514\u2500\u2500 README.md            # Project documentation\n"})}),"\n",(0,o.jsx)(e.h2,{id:"setup-instructions",children:"Setup Instructions"}),"\n",(0,o.jsx)(e.h3,{id:"1-install-bun",children:"1. Install Bun"}),"\n",(0,o.jsx)(e.p,{children:"First, install Bun runtime:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'# macOS/Linux\ncurl -fsSL https://bun.sh/install | bash\n\n# Windows\npowershell -c "irm bun.sh/install.ps1 | iex"\n\n# Verify installation\nbun --version\n'})}),"\n",(0,o.jsx)(e.h3,{id:"2-initialize-project",children:"2. Initialize Project"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"mkdir my-bun-wasm-app\ncd my-bun-wasm-app\nbun init -y\n"})}),"\n",(0,o.jsx)(e.h3,{id:"3-install-dependencies",children:"3. Install Dependencies"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Install rust-wasmpack-loader\nbun add -d rust-wasmpack-loader\n\n# Optional: testing framework\nbun add -d bun-types\n"})}),"\n",(0,o.jsx)(e.h3,{id:"4-create-cargotoml",children:"4. Create Cargo.toml"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-toml",metastring:'title="Cargo.toml"',children:'[package]\nname = "bun-wasm-example"\nversion = "0.1.0"\nedition = "2021"\n\n[lib]\ncrate-type = ["cdylib"]\n\n[dependencies]\nwasm-bindgen = "0.2.95"\n\n# For JavaScript interop\n[dependencies.js-sys]\nversion = "0.3"\n\n# Optional: for async operations\n[dependencies.wasm-bindgen-futures]\nversion = "0.4"\n\n# Optional: for serialization\n[dependencies.serde]\nversion = "1.0"\nfeatures = ["derive"]\n\n[dependencies.serde-wasm-bindgen]\nversion = "0.6"\n\n# Optimize for size and speed\n[profile.release]\nopt-level = 3\nlto = true\ncodegen-units = 1\npanic = "abort"\n'})}),"\n",(0,o.jsx)(e.h3,{id:"5-configure-bun",children:"5. Configure Bun"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-toml",metastring:'title="bunfig.toml"',children:'# Basic configuration\npreload = ["./node_modules/rust-wasmpack-loader/bun/preload.js"]\n\n# Test configuration\n[test]\npreload = ["./node_modules/rust-wasmpack-loader/bun/preload.js"]\n\n# Optional: custom configuration\n# [install]\n# cache = false\n# \n# [run]\n# bun = true\n'})}),"\n",(0,o.jsx)(e.h3,{id:"6-create-rust-code",children:"6. Create Rust Code"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-rust",metastring:'title="src/lib.rs"',children:'use wasm_bindgen::prelude::*;\n\n// Export a greeting function\n#[wasm_bindgen]\npub fn greet(name: &str) -> String {\n    format!("Hello, {}! Greetings from Rust running in Bun! \ud83d\ude80", name)\n}\n\n// Export mathematical functions\n#[wasm_bindgen]\npub fn fibonacci(n: u32) -> u32 {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => fibonacci(n - 1) + fibonacci(n - 2),\n    }\n}\n\n#[wasm_bindgen]\npub fn factorial(n: u32) -> u64 {\n    match n {\n        0 | 1 => 1,\n        _ => (2..=n as u64).product(),\n    }\n}\n\n// Export data processing functions\n#[wasm_bindgen]\npub fn sort_numbers(numbers: &[f64]) -> Vec<f64> {\n    let mut sorted = numbers.to_vec();\n    sorted.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    sorted\n}\n\n#[wasm_bindgen]\npub fn filter_positive(numbers: &[f64]) -> Vec<f64> {\n    numbers.iter().filter(|&&x| x > 0.0).copied().collect()\n}\n\n// Export string processing functions\n#[wasm_bindgen]\npub fn reverse_string(input: &str) -> String {\n    input.chars().rev().collect()\n}\n\n#[wasm_bindgen]\npub fn count_words(text: &str) -> u32 {\n    text.split_whitespace().count() as u32\n}\n\n#[wasm_bindgen]\npub fn to_uppercase(text: &str) -> String {\n    text.to_uppercase()\n}\n\n// Export performance testing function\n#[wasm_bindgen]\npub fn compute_pi(iterations: u32) -> f64 {\n    let mut pi = 0.0;\n    for i in 0..iterations {\n        let term = if i % 2 == 0 { 1.0 } else { -1.0 };\n        pi += term / (2.0 * i as f64 + 1.0);\n    }\n    pi * 4.0\n}\n\n// Export array operations\n#[wasm_bindgen]\npub fn sum_array(numbers: &[f64]) -> f64 {\n    numbers.iter().sum()\n}\n\n#[wasm_bindgen]\npub fn multiply_array(numbers: &[f64], factor: f64) -> Vec<f64> {\n    numbers.iter().map(|&x| x * factor).collect()\n}\n\n// Export hash-like function for demonstration\n#[wasm_bindgen]\npub fn simple_hash(input: &str) -> u32 {\n    let mut hash = 0u32;\n    for byte in input.bytes() {\n        hash = hash.wrapping_mul(31).wrapping_add(byte as u32);\n    }\n    hash\n}\n\n// Export validation functions\n#[wasm_bindgen]\npub fn is_prime(n: u32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt() as u32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\n#[wasm_bindgen]\npub fn is_palindrome(text: &str) -> bool {\n    let cleaned: String = text.chars()\n        .filter(|c| c.is_alphanumeric())\n        .map(|c| c.to_lowercase().next().unwrap())\n        .collect();\n\n    cleaned == cleaned.chars().rev().collect::<String>()\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"7-create-bun-entry-point",children:"7. Create Bun Entry Point"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",metastring:'title="src/index.js"',children:'import wasmModule from "./lib.rs";\n\nasync function main() {\n    try {\n        console.log("\ud83d\ude80 Loading Rust WebAssembly module in Bun...");\n\n        // Load the WASM module\n        if (typeof module !== "undefined") {\n            console.log("\u2705 WebAssembly module loaded successfully!");\n        }\n\n        // Test basic functionality\n        console.log("\\n\ud83d\udc4b Basic Functions:");\n        const greeting = module.greet("Bun Developer");\n        console.log(greeting);\n\n        // Test mathematical operations\n        console.log("\\n\ud83d\udd22 Mathematical Operations:");\n        console.log(`Fibonacci(15): ${module.fibonacci(15)}`);\n        console.log(`Factorial(10): ${module.factorial(10)}`);\n        console.log(`Is 17 prime? ${module.is_prime(17)}`);\n        console.log(`Is 18 prime? ${module.is_prime(18)}`);\n\n        // Test array operations\n        console.log("\\n\ud83d\udcca Array Operations:");\n        const numbers = [3.14, -2.5, 7.8, -1.2, 9.9, 0.5];\n        console.log("Original array:", numbers);\n        console.log("Sorted:", module.sort_numbers(numbers));\n        console.log("Positive only:", module.filter_positive(numbers));\n        console.log("Sum:", module.sum_array(numbers));\n        console.log("Multiplied by 2:", module.multiply_array(numbers, 2));\n\n        // Test string operations\n        console.log("\\n\ud83d\udcdd String Operations:");\n        const text = "Hello Bun and Rust!";\n        console.log(`Original: "${text}"`);\n        console.log(`Reversed: "${module.reverse_string(text)}"`);\n        console.log(`Uppercase: "${module.to_uppercase(text)}"`);\n        console.log(`Word count: ${module.count_words(text)}`);\n        console.log(`Simple hash: ${module.simple_hash(text)}`);\n\n        // Test palindrome detection\n        console.log("\\n\ud83d\udd0d Palindrome Detection:");\n        const palindromes = ["racecar", "hello", "A man a plan a canal Panama", "bun"];\n        palindromes.forEach(word => {\n            console.log(`"${word}" is palindrome: ${module.is_palindrome(word)}`);\n        });\n\n        // Performance test\n        console.log("\\n\u26a1 Performance Test:");\n        const start = Bun.nanoseconds();\n        const pi = module.compute_pi(1000000);\n        const end = Bun.nanoseconds();\n        const duration = (end - start) / 1000000; // Convert to milliseconds\n\n        console.log(`Computed \u03c0 \u2248 ${pi.toFixed(10)}`);\n        console.log(`Execution time: ${duration.toFixed(2)}ms`);\n        console.log(`Actual \u03c0: ${Math.PI.toFixed(10)}`);\n        console.log(`Difference: ${Math.abs(Math.PI - pi)\n            .toFixed(10)}`);\n\n        console.log("\\n\ud83c\udf89 All tests completed successfully!");\n        console.log(`\ud83d\ude80 Bun version: ${Bun.version}`);\n\n    } catch (error) {\n        console.error("\u274c Error loading or executing WASM module:", error);\n        process.exit(1);\n    }\n}\n\n// Export for testing\nexport { main };\n\n// Run if this is the main module\nif (import.meta.main) {\n    await main();\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"8-create-test-file",children:"8. Create Test File"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",metastring:'title="tests/wasm.test.js"',children:'import { test, expect } from "bun:test";\nimport wasmModule from "../src/lib.rs";\n\nlet module;\n\n// Setup before all tests\ntest.before(async () => {\n    module = wasmModule;\n});\n\ntest("should greet correctly", () => {\n    const result = module.greet("Test User");\n    expect(result)\n        .toContain("Hello, Test User!");\n    expect(result)\n        .toContain("Bun");\n});\n\ntest("should calculate fibonacci correctly", () => {\n    expect(module.fibonacci(0))\n        .toBe(0);\n    expect(module.fibonacci(1))\n        .toBe(1);\n    expect(module.fibonacci(10))\n        .toBe(55);\n});\n\ntest("should calculate factorial correctly", () => {\n    expect(module.factorial(0))\n        .toBe(1);\n    expect(module.factorial(5))\n        .toBe(120);\n    expect(module.factorial(10))\n        .toBe(3628800);\n});\n\ntest("should sort numbers correctly", () => {\n    const input = [3, 1, 4, 1, 5, 9, 2, 6];\n    const expected = [1, 1, 2, 3, 4, 5, 6, 9];\n    expect(module.sort_numbers(input))\n        .toEqual(expected);\n});\n\ntest("should filter positive numbers", () => {\n    const input = [-2, -1, 0, 1, 2, 3];\n    const expected = [1, 2, 3];\n    expect(module.filter_positive(input))\n        .toEqual(expected);\n});\n\ntest("should reverse string correctly", () => {\n    expect(module.reverse_string("hello"))\n        .toBe("olleh");\n    expect(module.reverse_string("bun"))\n        .toBe("nub");\n});\n\ntest("should count words correctly", () => {\n    expect(module.count_words("hello world"))\n        .toBe(2);\n    expect(module.count_words("one two three four"))\n        .toBe(4);\n});\n\ntest("should detect prime numbers", () => {\n    expect(module.is_prime(2))\n        .toBe(true);\n    expect(module.is_prime(17))\n        .toBe(true);\n    expect(module.is_prime(4))\n        .toBe(false);\n    expect(module.is_prime(18))\n        .toBe(false);\n});\n\ntest("should detect palindromes", () => {\n    expect(module.is_palindrome("racecar"))\n        .toBe(true);\n    expect(module.is_palindrome("A man a plan a canal Panama"))\n        .toBe(true);\n    expect(module.is_palindrome("hello"))\n        .toBe(false);\n});\n\ntest("should compute pi approximation", () => {\n    const pi = module.compute_pi(100000);\n    expect(pi)\n        .toBeCloseTo(Math.PI, 3);\n});\n\ntest("should sum array correctly", () => {\n    const input = [1, 2, 3, 4, 5];\n    expect(module.sum_array(input))\n        .toBe(15);\n});\n\ntest("should multiply array correctly", () => {\n    const input = [1, 2, 3];\n    const expected = [2, 4, 6];\n    expect(module.multiply_array(input, 2))\n        .toEqual(expected);\n});\n'})}),"\n",(0,o.jsx)(e.h3,{id:"9-update-packagejson",children:"9. Update Package.json"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",metastring:'title="package.json"',children:'{\n    ...,\n    "scripts": {\n        "start": "bun run src/index.js",\n        "dev": "bun --watch src/index.js",\n        "test": "bun test",\n        "test:watch": "bun test --watch",\n        "build": "bun build src/index.js --outdir dist --target bun",\n        "clean": "rm -rf dist target"\n    },\n    ...\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"running-the-example",children:"Running the Example"}),"\n",(0,o.jsx)(e.h3,{id:"development-mode",children:"Development Mode"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Run the application\nbun start\n\n# Run with hot reload (restarts on file changes)\nbun dev\n\n# Run with specific Bun flags\nbun --inspect src/index.js\n"})}),"\n",(0,o.jsx)(e.h3,{id:"testing",children:"Testing"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Run all tests\nbun test\n\n# Run tests in watch mode\nbun test --watch\n\n# Run specific test file\nbun test tests/wasm.test.js\n\n# Run tests with coverage\nbun test --coverage\n"})}),"\n",(0,o.jsx)(e.h3,{id:"production-build",children:"Production Build"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Build for production\nbun build\n\n# Run the built application\nbun dist/index.js\n"})}),"\n",(0,o.jsx)(e.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,o.jsx)(e.h3,{id:"custom-loader-configuration",children:"Custom Loader Configuration"}),"\n",(0,o.jsx)(e.p,{children:"Create a custom initialization file:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",metastring:'title="bun-init.js"',children:'import { plugin } from "bun";\nimport loader from "rust-wasmpack-loader";\n\nplugin(loader.bun({\n    logLevel: "info",\n    // Add custom options here\n}));\n'})}),"\n",(0,o.jsxs)(e.p,{children:["And add it to your ",(0,o.jsx)(e.code,{children:"bunfig.toml"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-toml",metastring:'title="bunfig.toml"',children:'preload = [\n    "./bun-init.js"\n]\n'})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.admonition,{title:"Bun Performance \ud83d\ude80",type:"tip",children:(0,o.jsx)(e.p,{children:"Bun can be 2-10x faster than Node.js for many workloads, and combined with Rust WebAssembly, provides exceptional\nperformance!"})})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}}}]);