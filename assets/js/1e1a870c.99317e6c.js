"use strict";(self.webpackChunkrust_wasmpack_loader=self.webpackChunkrust_wasmpack_loader||[]).push([[8707],{5133:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"docs/examples/web-webpack","title":"Web Webpack Example","description":"This example demonstrates how to use rust-wasmpack-loader in a browser application with Webpack. It is perfect for","source":"@site/docs/docs/examples/web-webpack.md","sourceDirName":"docs/examples","slug":"/docs/examples/web-webpack","permalink":"/rustwasm-loader/docs/examples/web-webpack","draft":false,"unlisted":false,"editUrl":"https://github.com/yeskiy/rustwasm-loader/tree/main/docs/docs/examples/web-webpack.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Examples Overview","permalink":"/rustwasm-loader/docs/examples/"},"next":{"title":"Node.js Webpack Example","permalink":"/rustwasm-loader/docs/examples/node-webpack"}}');var a=s(4848),i=s(8453);const r={},o="Web Webpack Example",l={},c=[{value:"Project Structure",id:"project-structure",level:2},{value:"Setup Instructions",id:"setup-instructions",level:2},{value:"1. Initialize Project",id:"1-initialize-project",level:3},{value:"2. Install Dependencies",id:"2-install-dependencies",level:3},{value:"3. Create Cargo.toml",id:"3-create-cargotoml",level:3},{value:"4. Configure Webpack",id:"4-configure-webpack",level:3},{value:"5. Create Rust Code",id:"5-create-rust-code",level:3},{value:"6. Create JavaScript Entry",id:"6-create-javascript-entry",level:3},{value:"7. Create HTML Template",id:"7-create-html-template",level:3},{value:"8. Update Package.json",id:"8-update-packagejson",level:3},{value:"Running the Example",id:"running-the-example",level:2},{value:"Development Mode",id:"development-mode",level:3},{value:"Production Build",id:"production-build",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Async Loading",id:"async-loading",level:3},{value:"TypeScript Integration",id:"typescript-integration",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"web-webpack-example",children:"Web Webpack Example"})}),"\n",(0,a.jsx)(n.p,{children:"This example demonstrates how to use rust-wasmpack-loader in a browser application with Webpack. It is perfect for\nclient-side applications that need high-performance Rust code running in the browser."}),"\n",(0,a.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"web-webpack-example/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.js          # Main JavaScript entry\n\u2502   \u251c\u2500\u2500 lib.rs            # Rust WebAssembly code\n\u2502   \u2514\u2500\u2500 utils.rs          # Additional Rust modules\n\u251c\u2500\u2500 dist/                 # Build output\n\u251c\u2500\u2500 Cargo.toml           # Rust configuration\n\u251c\u2500\u2500 package.json         # Node.js dependencies\n\u251c\u2500\u2500 webpack.config.js    # Webpack configuration\n\u2514\u2500\u2500 index.html          # HTML template\n"})}),"\n",(0,a.jsx)(n.h2,{id:"setup-instructions",children:"Setup Instructions"}),"\n",(0,a.jsx)(n.h3,{id:"1-initialize-project",children:"1. Initialize Project"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir my-web-wasm-app\ncd my-web-wasm-app\nnpm init -y\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-install-dependencies",children:"2. Install Dependencies"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Install rust-wasmpack-loader and webpack\nnpm install --save-dev rust-wasmpack-loader webpack webpack-cli webpack-dev-server html-webpack-plugin\n\n# Optional: TypeScript support\nnpm install --save-dev typescript ts-loader @types/node\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-create-cargotoml",children:"3. Create Cargo.toml"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",metastring:'title="Cargo.toml"',children:'[package]\nname = "web-wasm-example"\nversion = "0.1.0"\nedition = "2021"\n\n[lib]\ncrate-type = ["cdylib"]\n\n[dependencies]\nwasm-bindgen = "0.2.95"\n\n[dependencies.web-sys]\nversion = "0.3"\nfeatures = [\n    "console",\n    "Document",\n    "Element",\n    "HtmlElement",\n    "Window",\n]\n\n[dependencies.js-sys]\nversion = "0.3"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"4-configure-webpack",children:"4. Configure Webpack"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="webpack.config.js"',children:'const path = require("path");\nconst HtmlWebpackPlugin = require("html-webpack-plugin");\n\nmodule.exports = {\n    mode: "development",\n    entry: "./src/index.js",\n    output: {\n        path: path.resolve(__dirname, "dist"),\n        filename: "bundle.js",\n        clean: true\n    },\n    devServer: {\n        static: {\n            directory: path.join(__dirname, "dist")\n        },\n        compress: true,\n        port: 9000,\n        hot: true,\n        open: true\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.rs$/,\n                exclude: /node_modules/,\n                use: {\n                    loader: "rust-wasmpack-loader",\n                    options: {\n                        logLevel: "info"\n                    }\n                }\n            },\n            // Optional: TypeScript support\n            {\n                test: /\\.ts$/,\n                use: "ts-loader",\n                exclude: /node_modules/\n            }\n        ]\n    },\n    resolve: {\n        extensions: [".js", ".ts", ".wasm"]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: "./src/index.html",\n            title: "Rust WebAssembly App"\n        })\n    ],\n    experiments: {\n        asyncWebAssembly: true\n    }\n};\n'})}),"\n",(0,a.jsx)(n.h3,{id:"5-create-rust-code",children:"5. Create Rust Code"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",metastring:'title="src/lib.rs"',children:'use wasm_bindgen::prelude::*;\nuse web_sys::console;\n\n// Import the `console.log` function from the browser\n#[wasm_bindgen]\nextern "C" {\n    #[wasm_bindgen(js_namespace = console)]\n    fn log(s: &str);\n}\n\n// Define a macro for easier console logging\nmacro_rules! console_log {\n    ($($t:tt)*) => (log(&format_args!($($t)*).to_string()))\n}\n\n// Export a greeting function\n#[wasm_bindgen]\npub fn greet(name: &str) {\n    console_log!("Hello, {}! Greetings from Rust and WebAssembly!", name);\n}\n\n// Export a function to calculate fibonacci numbers\n#[wasm_bindgen]\npub fn fibonacci(n: u32) -> u32 {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => fibonacci(n - 1) + fibonacci(n - 2),\n    }\n}\n\n// Export a function for image processing simulation\n#[wasm_bindgen]\npub fn process_image_data(data: &[u8]) -> Vec<u8> {\n    // Simple image processing: invert colors\n    data.iter().map(|&pixel| 255 - pixel).collect()\n}\n\n// Export a function to demonstrate performance\n#[wasm_bindgen]\npub fn heavy_computation(iterations: u32) -> f64 {\n    let mut result = 0.0;\n    for i in 0..iterations {\n        result += (i as f64).sin().cos().tan();\n    }\n    result\n}\n\n// Called when the WASM module is instantiated\n#[wasm_bindgen(start)]\npub fn main() {\n    console_log!("Rust WebAssembly module loaded successfully!");\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"6-create-javascript-entry",children:"6. Create JavaScript Entry"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="src/index.js"',children:'// Import the Rust module\nimport module from "./lib.rs";\n\n// Wait for the module to load\nconsole.log("WebAssembly module loaded!");\n\n// Call Rust functions\nmodule.greet("WebAssembly Developer");\n\n// Calculate fibonacci\nconst fibResult = module.fibonacci(10);\nconsole.log(`Fibonacci(10) = ${fibResult}`);\n\n// Performance test\nconst start = performance.now();\nconst result = module.heavy_computation(1000000);\nconst end = performance.now();\nconsole.log(`Heavy computation result: ${result}`);\nconsole.log(`Execution time: ${end - start} milliseconds`);\n\n// Update the DOM\ndocument.body.innerHTML = `\n    <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;">\n        <h1>\ud83e\udd80 Rust + WebAssembly + Webpack</h1>\n        <div style="background: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0;">\n            <h3>Results:</h3>\n            <p><strong>Fibonacci(10):</strong> ${fibResult}</p>\n            <p><strong>Heavy computation:</strong> ${result.toFixed(6)}</p>\n            <p><strong>Execution time:</strong> ${(end - start).toFixed(2)}ms</p>\n        </div>\n        <div style="background: #e8f4fd; padding: 20px; border-radius: 8px;">\n            <h3>\ud83c\udf89 Success!</h3>\n            <p>Your Rust code is running in the browser via WebAssembly!</p>\n            <p>Check the browser console for more details.</p>\n        </div>\n    </div>\n`;\n\n// Image processing example\nconst imageData = new Uint8Array([255, 128, 64, 32, 16, 8, 4, 2]);\nconst processedData = module.process_image_data(imageData);\nconsole.log("Original image data:", Array.from(imageData));\nconsole.log("Processed image data:", Array.from(processedData));\n'})}),"\n",(0,a.jsx)(n.h3,{id:"7-create-html-template",children:"7. Create HTML Template"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",metastring:'title="src/index.html"',children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Rust WebAssembly Example</title>\n    <style>\n        body {\n            margin: 0;\n            padding: 0;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        #loading {\n            color: white;\n            font-family: Arial, sans-serif;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n<div id="loading">\n    <h2>\ud83e\udd80 Loading Rust WebAssembly...</h2>\n    <p>Please wait while we compile and load your Rust code.</p>\n</div>\n</body>\n</html>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"8-update-packagejson",children:"8. Update Package.json"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n    ...\n    "scripts": {\n        "start": "webpack serve --mode development",\n        "build": "webpack --mode production",\n        "dev": "webpack serve --mode development --open"\n    },\n    ...\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"running-the-example",children:"Running the Example"}),"\n",(0,a.jsx)(n.h3,{id:"development-mode",children:"Development Mode"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Start the development server\nnpm start\n\n# Or with automatic browser opening\nnpm run dev\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The application will be available at ",(0,a.jsx)(n.code,{children:"http://localhost:9000"})," with hot reload enabled."]}),"\n",(0,a.jsx)(n.h3,{id:"production-build",children:"Production Build"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Build for production\nnpm run build\n\n# Serve the built files\nnpx serve dist\n"})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,a.jsx)(n.h3,{id:"async-loading",children:"Async Loading"}),"\n",(0,a.jsx)(n.p,{children:"For better performance, enable async WASM loading:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="webpack.config.js"',children:'module.exports = {\n    // ... other config\n    module: {\n        rules: [\n            {\n                test: /\\.rs$/,\n                exclude: /node_modules/,\n                use: {\n                    loader: "rust-wasmpack-loader",\n                    options: {\n                        web: {\n                            asyncLoading: true\n                        }\n                    }\n                }\n            }\n        ]\n    }\n};\n'})}),"\n",(0,a.jsx)(n.h3,{id:"typescript-integration",children:"TypeScript Integration"}),"\n",(0,a.jsxs)(n.p,{children:["Create a ",(0,a.jsx)(n.code,{children:"tsconfig.json"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="tsconfig.json"',children:'{\n    "compilerOptions": {\n        "target": "ES2020",\n        "module": "ESNext",\n        "moduleResolution": "node",\n        "strict": true,\n        "esModuleInterop": true,\n        "skipLibCheck": true,\n        "forceConsistentCasingInFileNames": true\n    },\n    "include": [\n        "src/**/*"\n    ],\n    "exclude": [\n        "node_modules",\n        "dist"\n    ]\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"WASM module not loading:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Check the browser console for errors"}),"\n",(0,a.jsxs)(n.li,{children:["Ensure ",(0,a.jsx)(n.code,{children:"experiments.asyncWebAssembly"})," is enabled (check ",(0,a.jsx)(n.a,{href:"https://caniuse.com/wasm",children:(0,a.jsx)(n.strong,{children:"can I use WebAssembly"})})," for browser support)"]}),"\n",(0,a.jsx)(n.li,{children:"Verify Rust compilation succeeded"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Large bundle size:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Enable production mode optimizations"}),"\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"asyncLoading: true"})]}),"\n",(0,a.jsx)(n.li,{children:"Optimize Rust dependencies"}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.admonition,{title:"Performance Boost \ud83d\ude80",type:"tip",children:(0,a.jsx)(n.p,{children:"WebAssembly can provide 10-100x performance improvements for computationally intensive tasks compared to JavaScript!"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);