"use strict";(self.webpackChunkrust_wasmpack_loader=self.webpackChunkrust_wasmpack_loader||[]).push([[7510],{294:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"docs/examples/node-webpack","title":"Node.js Webpack Example","description":"This example demonstrates how to use rust-wasmpack-loader in a Node.js application with Webpack. Perfect for server-side","source":"@site/docs/docs/examples/node-webpack.md","sourceDirName":"docs/examples","slug":"/docs/examples/node-webpack","permalink":"/rustwasm-loader/docs/examples/node-webpack","draft":false,"unlisted":false,"editUrl":"https://github.com/yeskiy/rustwasm-loader/tree/main/docs/docs/examples/node-webpack.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Web Webpack Example","permalink":"/rustwasm-loader/docs/examples/web-webpack"},"next":{"title":"Bun Node.js Example","permalink":"/rustwasm-loader/docs/examples/node-bun"}}');var o=t(4848),a=t(8453);const r={sidebar_position:3},l="Node.js Webpack Example",i={},c=[{value:"Project Structure",id:"project-structure",level:2},{value:"Setup Instructions",id:"setup-instructions",level:2},{value:"1. Initialize Project",id:"1-initialize-project",level:3},{value:"2. Install Dependencies",id:"2-install-dependencies",level:3},{value:"3. Create Cargo.toml",id:"3-create-cargotoml",level:3},{value:"4. Configure Webpack",id:"4-configure-webpack",level:3},{value:"5. Create Test Configuration",id:"5-create-test-configuration",level:3},{value:"6. Create Rust Code",id:"6-create-rust-code",level:3},{value:"7. Create Node.js Entry Point",id:"7-create-nodejs-entry-point",level:3},{value:"8. Create Test File",id:"8-create-test-file",level:3},{value:"9. Update Package.json",id:"9-update-packagejson",level:3},{value:"Running the Example",id:"running-the-example",level:2},{value:"Development Mode",id:"development-mode",level:3},{value:"Production Build",id:"production-build",level:3},{value:"Running Tests",id:"running-tests",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"nodejs-webpack-example",children:"Node.js Webpack Example"})}),"\n",(0,o.jsx)(n.p,{children:"This example demonstrates how to use rust-wasmpack-loader in a Node.js application with Webpack. Perfect for server-side\napplications, CLI tools, and backend services that need high-performance Rust code."}),"\n",(0,o.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"node-webpack-example/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.js          # Main Node.js entry\n\u2502   \u251c\u2500\u2500 lib.rs            # Rust WebAssembly code\n\u2502   \u2514\u2500\u2500 utils.rs          # Additional Rust modules\n\u251c\u2500\u2500 dist/                 # Build output\n\u251c\u2500\u2500 tests/                # Test files\n\u251c\u2500\u2500 Cargo.toml           # Rust configuration\n\u251c\u2500\u2500 package.json         # Node.js dependencies\n\u251c\u2500\u2500 webpack.config.js    # Webpack configuration\n\u2514\u2500\u2500 test.webpack.config.js # Test configuration\n"})}),"\n",(0,o.jsx)(n.h2,{id:"setup-instructions",children:"Setup Instructions"}),"\n",(0,o.jsx)(n.h3,{id:"1-initialize-project",children:"1. Initialize Project"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mkdir my-node-wasm-app\ncd my-node-wasm-app\nnpm init -y\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-install-dependencies",children:"2. Install Dependencies"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Install rust-wasmpack-loader and webpack\nnpm install --save-dev rust-wasmpack-loader webpack webpack-cli webpack-node-externals\n\n# Install babel for modern JavaScript support\nnpm install --save-dev @babel/core @babel/preset-env babel-loader @babel/plugin-syntax-async-generators\n\n# Install development tools\nnpm install --save-dev nodemon nodemon-webpack-plugin\n\n# Install testing framework\nnpm install --save-dev jest\n\n# Runtime dependency\nnpm install regenerator-runtime\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-create-cargotoml",children:"3. Create Cargo.toml"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",metastring:'title="Cargo.toml"',children:'[package]\nname = "node-wasm-example"\nversion = "0.1.0"\nedition = "2021"\n\n[lib]\ncrate-type = ["cdylib"]\n\n[dependencies]\nwasm-bindgen = "0.2.95"\n\n# For Node.js specific features\n[dependencies.js-sys]\nversion = "0.3"\n\n# Optional: for async operations\n[dependencies.wasm-bindgen-futures]\nversion = "0.4"\n\n# Optional: for serialization\n[dependencies.serde]\nversion = "1.0"\nfeatures = ["derive"]\n\n[dependencies.serde-wasm-bindgen]\nversion = "0.6"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-configure-webpack",children:"4. Configure Webpack"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'title="webpack.config.js"',children:'const path = require("path");\nconst nodeExternals = require("webpack-node-externals");\nconst NodemonPlugin = require("nodemon-webpack-plugin");\n\nmodule.exports = {\n    mode: "development",\n    entry: ["regenerator-runtime/runtime", "./src/index.js"],\n    output: {\n        path: path.resolve(__dirname, "dist"),\n        filename: "bundle.js",\n        clean: true\n    },\n    target: "async-node",\n    node: false,\n    externals: nodeExternals(),\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                exclude: /node_modules/,\n                resolve: {\n                    fullySpecified: false\n                },\n                use: {\n                    loader: "babel-loader",\n                    options: {\n                        presets: ["@babel/preset-env"],\n                        plugins: ["@babel/plugin-syntax-async-generators"]\n                    }\n                }\n            },\n            {\n                test: /\\.rs$/,\n                exclude: /node_modules/,\n                use: [\n                    {\n                        loader: "babel-loader",\n                        options: {\n                            presets: ["@babel/preset-env"],\n                            plugins: ["@babel/plugin-syntax-async-generators"]\n                        }\n                    },\n                    {\n                        loader: "rust-wasmpack-loader",\n                        options: {\n                            node: {\n                                bundle: true\n                            },\n                            logLevel: "info"\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    resolve: {\n        extensions: [".js", ".ts"]\n    },\n    plugins: [\n        new NodemonPlugin({\n            script: path.resolve("./dist/bundle.js"),\n            watch: [path.resolve("./dist")],\n            ignore: [\n                "*.js.map",\n                "./src/**/*.js",\n                "./src/**/*.ts",\n                "swagger.json"\n            ]\n        })\n    ],\n    experiments: {\n        syncWebAssembly: true\n    }\n};\n'})}),"\n",(0,o.jsx)(n.h3,{id:"5-create-test-configuration",children:"5. Create Test Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'title="test.webpack.config.js"',children:'const path = require("path");\nconst nodeExternals = require("webpack-node-externals");\n\nmodule.exports = {\n    mode: "development",\n    entry: "./src/index.js",\n    output: {\n        path: path.resolve(__dirname, "dist"),\n        filename: "test-bundle.js",\n        clean: false\n    },\n    target: "async-node",\n    node: false,\n    externals: nodeExternals(),\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                exclude: /node_modules/,\n                resolve: {\n                    fullySpecified: false\n                },\n                use: {\n                    loader: "babel-loader",\n                    options: {\n                        presets: ["@babel/preset-env"],\n                        plugins: ["@babel/plugin-syntax-async-generators"]\n                    }\n                }\n            },\n            {\n                test: /\\.rs$/,\n                exclude: /node_modules/,\n                use: [\n                    {\n                        loader: "babel-loader",\n                        options: {\n                            presets: ["@babel/preset-env"],\n                            plugins: ["@babel/plugin-syntax-async-generators"]\n                        }\n                    },\n                    {\n                        loader: "rust-wasmpack-loader",\n                        options: {\n                            node: {\n                                bundle: true\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    resolve: {\n        extensions: [".js", ".ts"]\n    },\n    experiments: {\n        syncWebAssembly: true\n    }\n};\n'})}),"\n",(0,o.jsx)(n.h3,{id:"6-create-rust-code",children:"6. Create Rust Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:'title="src/lib.rs"',children:'use wasm_bindgen::prelude::*;\nuse js_sys::Promise;\n\n// Export a simple greeting function\n#[wasm_bindgen]\npub fn greet(name: &str) -> String {\n    format!("Hello, {}! Greetings from Rust running in Node.js!", name)\n}\n\n// Export a function for mathematical operations\n#[wasm_bindgen]\npub fn calculate_prime_count(limit: u32) -> u32 {\n    let mut count = 0;\n    for num in 2..=limit {\n        if is_prime(num) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn is_prime(n: u32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as f64).sqrt() as u32 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\n// Export a function for data processing\n#[wasm_bindgen]\npub fn process_data(data: &[u8]) -> Vec<u8> {\n    // Example: simple data transformation\n    data.iter()\n        .map(|&byte| {\n            // Apply some transformation (e.g., encryption-like operation)\n            byte.wrapping_add(1).wrapping_mul(3) % 256\n        })\n        .collect()\n}\n\n// Export a function for string processing\n#[wasm_bindgen]\npub fn analyze_text(text: &str) -> String {\n    let word_count = text.split_whitespace().count();\n    let char_count = text.chars().count();\n    let line_count = text.lines().count();\n\n    format!(\n        "Text Analysis:\\n- Words: {}\\n- Characters: {}\\n- Lines: {}",\n        word_count, char_count, line_count\n    )\n}\n\n// Export a function for performance testing\n#[wasm_bindgen]\npub fn heavy_computation(iterations: u32) -> f64 {\n    let mut result = 0.0;\n    for i in 0..iterations {\n        result += (i as f64).sin().cos().tan().abs();\n    }\n    result\n}\n\n// Export a function that works with JSON-like data\n#[wasm_bindgen]\npub fn process_numbers(numbers: &[f64]) -> Vec<f64> {\n    numbers.iter()\n        .map(|&x| x * x + 2.0 * x + 1.0) // f(x) = x\xb2 + 2x + 1\n        .collect()\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"7-create-nodejs-entry-point",children:"7. Create Node.js Entry Point"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'title="src/index.js"',children:'import module from "./lib.rs";\n\nasync function main() {\n    try {\n        console.log("\ud83e\udd80 Loading Rust WebAssembly module...");\n\n        // Load the WASM module\n        if (typeof module !== "undefined") {\n            console.log("\u2705 WebAssembly module loaded successfully!");\n        }\n\n        // Test basic functionality\n        const greeting = module.greet("Node.js Developer");\n        console.log(greeting);\n\n        // Test mathematical operations\n        console.log("\\n\ud83d\udcca Mathematical Operations:");\n        const primeCount = module.calculate_prime_count(1000);\n        console.log(`Prime numbers up to 1000: ${primeCount}`);\n\n        // Test data processing\n        console.log("\\n\ud83d\udd04 Data Processing:");\n        const inputData = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n        const processedData = module.process_data(inputData);\n        console.log("Input data:", Array.from(inputData));\n        console.log("Processed data:", Array.from(processedData));\n\n        // Test text analysis\n        console.log("\\n\ud83d\udcdd Text Analysis:");\n        const sampleText = `\n            Rust and WebAssembly provide excellent performance\n            for computationally intensive tasks in Node.js applications.\n            This combination offers near-native speed with memory safety.\n        `;\n        const analysis = module.analyze_text(sampleText.trim());\n        console.log(analysis);\n\n        // Test performance\n        console.log("\\n\u26a1 Performance Test:");\n        const start = process.hrtime.bigint();\n        const result = module.heavy_computation(1000000);\n        const end = process.hrtime.bigint();\n        const duration = Number(end - start) / 1000000; // Convert to milliseconds\n\n        console.log(`Heavy computation result: ${result.toFixed(6)}`);\n        console.log(`Execution time: ${duration.toFixed(2)}ms`);\n\n        // Test array processing\n        console.log("\\n\ud83d\udd22 Array Processing:");\n        const numbers = [1, 2, 3, 4, 5];\n        const processed = module.process_numbers(numbers);\n        console.log("Input numbers:", numbers);\n        console.log("Processed (f(x) = x\xb2 + 2x + 1):", Array.from(processed));\n\n        console.log("\\n\ud83c\udf89 All tests completed successfully!");\n\n    } catch (error) {\n        console.error("\u274c Error loading or executing WASM module:", error);\n        process.exit(1);\n    }\n}\n\n// Export for testing\nexport { main };\n\n// Run if this is the main module\nif (import.meta.url === `file://${process.argv[1]}`) {\n    main();\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"8-create-test-file",children:"8. Create Test File"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'title="tests/wasm.test.js"',children:'import wasmModule from "../src/lib.rs";\n\ndescribe("Rust WebAssembly Module", () => {\n    let module;\n\n    beforeAll(async () => {\n        module = wasmModule;\n    });\n\n    test("should greet correctly", () => {\n        const result = module.greet("Test User");\n        expect(result)\n            .toContain("Hello, Test User!");\n        expect(result)\n            .toContain("Node.js");\n    });\n\n    test("should calculate prime count correctly", () => {\n        const result = module.calculate_prime_count(10);\n        expect(result)\n            .toBe(4); // Primes up to 10: 2, 3, 5, 7\n    });\n\n    test("should process data correctly", () => {\n        const input = new Uint8Array([1, 2, 3]);\n        const result = module.process_data(input);\n        expect(result)\n            .toHaveLength(3);\n        expect(Array.from(result))\n            .toEqual([6, 9, 12]);\n    });\n\n    test("should analyze text correctly", () => {\n        const text = "Hello world test";\n        const result = module.analyze_text(text);\n        expect(result)\n            .toContain("Words: 3");\n        expect(result)\n            .toContain("Characters: 16");\n    });\n\n    test("should perform heavy computation", () => {\n        const result = module.heavy_computation(1000);\n        expect(typeof result)\n            .toBe("number");\n        expect(result)\n            .toBeGreaterThan(0);\n    });\n\n    test("should process numbers array", () => {\n        const input = [1, 2, 3];\n        const result = module.process_numbers(input);\n        expect(Array.from(result))\n            .toEqual([4, 9, 16]); // f(x) = x\xb2 + 2x + 1\n    });\n});\n'})}),"\n",(0,o.jsx)(n.h3,{id:"9-update-packagejson",children:"9. Update Package.json"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n    ...,\n    "scripts": {\n        "start": "webpack --config webpack.config.js --watch",\n        "build": "webpack --config webpack.config.js --mode production",\n        "test": "webpack --config test.webpack.config.js && jest tests/wasm.test.js",\n        "dev": "npm start"\n    },\n    ...\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"running-the-example",children:"Running the Example"}),"\n",(0,o.jsx)(n.h3,{id:"development-mode",children:"Development Mode"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Start development with hot reload\nnpm start\n\n# The application will rebuild automatically when files change\n"})}),"\n",(0,o.jsx)(n.h3,{id:"production-build",children:"Production Build"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Build for production\nnpm run build\n\n# Run the built application\nnode dist/bundle.js\n"})}),"\n",(0,o.jsx)(n.h3,{id:"running-tests",children:"Running Tests"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Run all tests\nnpm test\n\n# Run tests in watch mode\nnpm run test -- --watch\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.admonition,{title:"Server Performance \ud83d\ude80",type:"tip",children:(0,o.jsx)(n.p,{children:"Node.js + Rust WebAssembly can provide significant performance improvements for CPU-intensive server operations!"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);